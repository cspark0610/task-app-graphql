import Head from 'next/head';
import CreateTaskForm from '../components/CreateTaskForm';
import TasksList from '../components/TasksList';
import TaskFilter from '../components/TaskFilter';
import {
	TasksDocument,
	TasksQuery,
	TasksQueryVariables,
	TaskStatus,
	useTasksQuery,
} from '../generated/graphql-frontend';
import { initializeApollo } from '../lib/client';
import { useRouter } from 'next/router';
import Error from 'next/error';
import { GetServerSideProps } from 'next';
import { useEffect, useRef } from 'react';

//type guard for status is in TaskStatus enum
//status is TaskStatus === boolean
const isTaskStatus = (value: string): value is TaskStatus => {
	return Object.values(TaskStatus).includes(value as TaskStatus);
};

export default function Home() {
	const router = useRouter();
	const status = typeof router.query.status === 'string' ? router.query.status : undefined;

	if (status !== undefined && !isTaskStatus(status)) {
		return <Error statusCode={404} />;
	}
	// eslint-disable-next-line react-hooks/rules-of-hooks
	const prevStatus = useRef(status);
	// eslint-disable-next-line react-hooks/rules-of-hooks
	useEffect(() => {
		prevStatus.current = status;
	}, [status]);

	// eslint-disable-next-line react-hooks/rules-of-hooks
	const result = useTasksQuery({
		variables: { status: status as TaskStatus },
		fetchPolicy: prevStatus.current === status ? 'cache-first' : 'cache-and-network',
	});

	const tasks = result.data?.tasks;
	const { loading, error } = result;

	return (
		<div>
			<Head>
				<title>task app</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<CreateTaskForm onSuccess={result.refetch} />
			{loading && !tasks ? (
				<p>Loading tasks...</p>
			) : error ? (
				<p>error</p>
			) : tasks && tasks.length ? (
				<TasksList tasks={tasks} />
			) : (
				<p className="no-tasks-message">No tasks found</p>
			)}
			<TaskFilter status={status as TaskStatus} />
		</div>
	);
}

// export const getStaticProps = async () => {
// 	//want to fetch all tasks with apollo client
// 	const apolloClioent = initializeApollo();

// 	await apolloClioent.query<TasksQuery>({
// 		query: TasksDocument,
// 	});
// 	return {
// 		props: {
// 			initialApolloState: apolloClioent.cache.extract(),
// 		},
// 	};
// };

export const getServerSideProps: GetServerSideProps = async (context) => {
	const status = typeof context.params?.status === 'string' ? context.params.status : undefined;

	if (status === undefined || isTaskStatus(status)) {
		const apolloClioent = initializeApollo();
		await apolloClioent.query<TasksQuery, TasksQueryVariables>({
			query: TasksDocument,
			variables: { status: status as TaskStatus },
		});
		return {
			props: {
				initialApolloState: apolloClioent.cache.extract(),
			},
		};
	}
	return {
		props: {},
	};
};
